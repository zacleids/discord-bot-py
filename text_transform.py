from enum import Enum

from errors import InvalidInputError


class TransformChoice(str, Enum):
    Alternating_case = "alternating_case"
    Mirror = "mirror"
    Reverse = "reverse"
    Upside_down = "upside_down"


# Mapping for upside down characters (bidirectional)
UPSIDE_DOWN_MAP = {
    "a": "…ê",
    "…ê": "a",
    "b": "q",
    "q": "b",
    "c": "…î",
    "…î": "c",
    "d": "p",
    "p": "d",
    "e": "«ù",
    "«ù": "e",
    "f": "…ü",
    "…ü": "f",
    "g": "∆É",
    "∆É": "g",
    "h": "…•",
    "…•": "h",
    "i": "·¥â",
    "·¥â": "i",
    "j": "…æ",
    "…æ": "j",
    "k": " û",
    " û": "k",
    "l": "l",
    "m": "…Ø",
    "…Ø": "m",
    "n": "u",
    "u": "n",
    "o": "o",
    "r": "…π",
    "…π": "r",
    "s": "s",
    "t": " á",
    " á": "t",
    "v": " å",
    " å": "v",
    "w": " ç",
    " ç": "w",
    "x": "x",
    "y": " é",
    " é": "y",
    "z": "z",
    ".": "Àô",
    "Àô": ".",
    "!": "¬°",
    "¬°": "!",
    "?": "¬ø",
    "¬ø": "?",
    "[": "]",
    "]": "[",
    "(": ")",
    ")": "(",
    "{": "}",
    "}": "{",
    "<": ">",
    ">": "<",
    "A": "‚àÄ",
    "‚àÄ": "A",
    "B": "êêí",
    "êêí": "B",
    "C": "∆Ü",
    "∆Ü": "C",
    "D": "·ó°",
    "·ó°": "D",
    "E": "∆é",
    "∆é": "E",
    "F": "‚Ñ≤",
    "‚Ñ≤": "F",
    "G": "‚ÖÅ",
    "‚ÖÅ": "G",
    "H": "H",
    "I": "I",
    "J": "≈ø",
    "≈ø": "J",
    "K": " û",
    "L": "À•",
    "À•": "L",
    "M": "W",
    "W": "M",
    "N": "N",
    "O": "O",
    "P": "‘Ä",
    "‘Ä": "P",
    "Q": "Œå",
    "Œå": "Q",
    "R": "·¥ö",
    "·¥ö": "R",
    "S": "S",
    "T": "‚ä•",
    "‚ä•": "T",
    "U": "‚à©",
    "‚à©": "U",
    "V": "Œõ",
    "Œõ": "V",
    "X": "X",
    "Y": "‚ÖÑ",
    "‚ÖÑ": "Y",
    "Z": "Z",
}

# Mapping for mirrored characters (bidirectional)
MIRROR_MAP = {
    "a": "…í",
    "…í": "a",
    "b": "d",
    "d": "b",
    "c": "…î",
    "…î": "c",
    "e": "…ò",
    "…ò": "e",
    "f": "Íüª",
    "Íüª": "f",
    "g": "«´",
    "«´": "g",
    "h": " ú",
    " ú": "h",
    "i": "i",
    "j": "ÍûÅ",
    "ÍûÅ": "j",
    "k": " û",
    " û": "k",
    "l": "|",
    "|": "l",
    "m": "m",
    "n": "n",
    "o": "o",
    "p": "q",
    "q": "p",
    "r": "·¥ô",
    "·¥ô": "r",
    "s": "ÍôÖ",
    "ÍôÖ": "s",
    "t": "∆ö",
    "∆ö": "t",
    "u": "u",
    "v": "v",
    "w": "w",
    "x": "x",
    "y": "y",
    "z": "z",
    ".": ".",
    "!": "!",
    "?": "?",
    "[": "]",
    "]": "[",
    "(": ")",
    ")": "(",
    "{": "}",
    "}": "{",
    "<": ">",
    ">": "<",
    "A": "A",
    "B": "·ô†",
    "·ô†": "B",
    "C": "∆Ü",
    "∆Ü": "C",
    "D": "·ó°",
    "·ó°": "D",
    "E": "∆é",
    "∆é": "E",
    "F": "Íüª",
    "G": "·éÆ",
    "·éÆ": "G",
    "H": "H",
    "I": "I",
    "J": "·Ç±",
    "·Ç±": "J",
    "K": "Íìò",
    "Íìò": "K",
    "L": "‚ÖÉ",
    "‚ÖÉ": "L",
    "M": "M",
    "N": "–ò",
    "–ò": "N",
    "O": "O",
    "P": "Íüº",
    "Íüº": "P",
    "Q": "œò",
    "œò": "Q",
    "R": "–Ø",
    "–Ø": "R",
    "S": "ÍôÑ",
    "ÍôÑ": "S",
    "T": "T",
    "U": "U",
    "V": "V",
    "W": "W",
    "X": "X",
    "Y": "Y",
    "Z": "∆∏",
    "∆∏": "Z",
}


def reverse_text(text: str) -> str:
    """Returns the text reversed"""
    return text[::-1]


def mirror_text(text: str) -> str:
    """Returns the text with mirrored characters"""
    return "".join(MIRROR_MAP.get(c, c) for c in text)


def upside_down_text(text: str) -> str:
    """Returns the text flipped upside down"""
    return "".join(UPSIDE_DOWN_MAP.get(c, c) for c in reversed(text))


def alternating_case(text: str) -> str:
    """Returns text with alternating case"""
    return "".join(c.upper() if i % 2 == 0 else c.lower() for i, c in enumerate(text))


def transform_text(text: str, transform_type: TransformChoice) -> str:
    match transform_type:
        case TransformChoice.Alternating_case:
            return alternating_case(text)
        case TransformChoice.Mirror:
            return mirror_text(text)
        case TransformChoice.Reverse:
            return reverse_text(text)
        case TransformChoice.Upside_down:
            return upside_down_text(text)
        case _:
            return text


def handle_text_transform_command(args: list[str]) -> str:
    """Handle the text transform command with args in format: [transform_type, *text_words]"""
    if len(args) < 2:
        raise InvalidInputError("Usage: !transform <type> <text>")

    try:
        transform_type = TransformChoice(args[0].lower())
    except ValueError:
        valid_types = ", ".join([t.value for t in TransformChoice])
        raise InvalidInputError(f"Invalid transform type. Valid types: {valid_types}")

    text = " ".join(args[1:])
    return transform_text(text, transform_type)
